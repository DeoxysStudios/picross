from gasp import games # type: ignore
from gasp import boards # type: ignore
from gasp import color # type: ignore
import random

BOX_SIZE: int = 30
WIDTH: int = 15
HEIGHT: int = 10
MARGIN: int = 2 * BOX_SIZE
FILL_PERCENT: float = 0.65
COLORS = {
    "UNKNOWN" : color.WHITE,
    "MINED" : color.BLUE,
    "FLAGGED" : color.LIGHTGRAY,
    "MISTAKE" : color.RED,
    "FLAG": color.GRAY
}
STATES = {
    "UNKNOWN" : 0,
    "MINED" : 1,
    "FLAGGED" : -1
}

class Tile(boards.GameCell):
    
    def __init__(self, board: "Game", i: int, j: int, mineable: bool):
        self.board: Game = board
        self.i, self.j = i, j
        self.mineable: bool = mineable
        self.changeable: bool = True
        self.state: int = STATES["UNKNOWN"]
        self.init_gamecell(board, i, j)
        self.set_color(COLORS["UNKNOWN"])
        x, y = self.board.cell_to_coords(self.i, self.j)
        self.mark = games.Text(self.board, x + BOX_SIZE / 2, y + BOX_SIZE / 2, "", BOX_SIZE, COLORS["FLAG"])
        
        
    def handleMistake(self) -> None:
        # TODO: Handle self when player makes mistake
        raise Exception("'handleMistake' is not fully implemented")
    
    
    def mine(self) -> None:
        # Handle unchangeable tiles
        if not self.changeable:
            return
        
        # Handle flagged tiles
        if self.state == STATES["FLAGGED"]:
            return
        
        # Handle mistake
        if not self.mineable:
            self.handleMistake()
            return
        
        # Mine this tile
        self.state = STATES["MINED"]
        self.changeable = False
        self.set_color(COLORS["MINED"])
        
    
    def flag(self, isMistake: bool = False) -> None:
        # Handle unchangeable tiles
        if not self.changeable:
            return
        
        # Handle flagged tiles
        if self.state == STATES["FLAGGED"]:
            self.state = STATES["UNKNOWN"]
            self.mark.set_text("")
            self.set_color(COLORS["UNKNOWN"])
            return
        
        # Flag this tile
        self.state = STATES["FLAGGED"]
        self.mark.set_text("X")
        self.set_color(COLORS["FLAGGED"])
    


class Game(boards.SingleBoard):
    
    def __init__(self):
        self.init_singleboard((MARGIN, MARGIN), WIDTH, HEIGHT, BOX_SIZE)
        self.draw_all_outlines()
        self.grid: list[list[Tile]]
        
        
    def new_gamecell(self, i: int, j: int) -> Tile:
        mineable: bool = random.random() <= FILL_PERCENT
        return Tile(self, i, j, mineable)
        
        
    def mouse_up(self, pos: tuple[int, int], button: int) -> None:
        x, y = pos
        i, j = self.coords_to_cell(x, y)
        assert isinstance(i, int) and isinstance(j, int)
        if not self.on_board(i, j):
            return
        
        # Left Click
        if button == 0:
            self.grid[i][j].mine()
            return
        
        # Right Click
        if button == 2:
            self.grid[i][j].flag()
            return
        return
        



game = Game()
game.mainloop()