from gasp import games # type: ignore
from gasp import boards # type: ignore
from gasp import color # type: ignore
import random

BOX_SIZE: int = 30
WIDTH: int = 15
HEIGHT: int = 10
MARGIN_X = WIDTH // 2 * BOX_SIZE
MARGIN_Y = HEIGHT // 2 * BOX_SIZE
FILL_PERCENT: float = 0.6
MAX_MISTAKES: int = 3
LARGE_OUTLINE_THICKNESS: int = 2
COLORS = {
    "UNKNOWN" : color.WHITE,
    "MINED" : color.BLUE,
    "FLAGGED" : color.LIGHTGRAY,
    "MISTAKE" : color.RED,
    "FLAG" : color.GRAY,
    "NUMS" : color.WHITE,
    "CROSSOUT" : color.GRAY,
    "WIN" : color.YELLOW,
    "LOSE" : color.RED,
    "GRID" : color.BLACK
}
STATES = {
    "UNKNOWN" : 0,
    "MINED" : 1,
    "FLAGGED" : -1
}

class Tile(boards.GameCell):
    
    def __init__(self, board: "Game", i: int, j: int, mineable: bool):
        self.board: Game = board
        self.i, self.j = i, j
        self.mineable: bool = mineable
        self.changeable: bool = True
        self.state: int = STATES["UNKNOWN"]
        self.init_gamecell(board, i, j)
        self.set_color(COLORS["UNKNOWN"])
        x, y = self.board.cell_to_coords(self.i, self.j)
        self.mark = games.Text(self.board, x + BOX_SIZE / 2, y + BOX_SIZE / 2, "", BOX_SIZE, COLORS["FLAG"], None, 1)
        
        
    def handleMistake(self) -> None:
        self.board.health -= 1
        if self.mineable:
            self.mine()
        else:
            self.flag()
        self.mark.set_color(COLORS["MISTAKE"])
        self.mark.set_text("X")
        self.changeable = False
        self.board.updateBoard()
        return
    
    
    def mine(self) -> None:
        # Handle unchangeable tiles
        if not self.changeable:
            return
        
        # Handle flagged tiles
        if self.state == STATES["FLAGGED"]:
            return
        
        # Handle mistake
        if not self.mineable:
            self.handleMistake()
            return
        
        # Mine this tile
        self.state = STATES["MINED"]
        self.changeable = False
        self.set_color(COLORS["MINED"])
        self.board.handleCrossouts(self.j, self.i)
        self.board.progress += 1
        self.board.updateBoard()
        return
        
    
    def flag(self) -> None:
        # Handle unchangeable tiles
        if not self.changeable:
            return
        
        # Handle mistake
        if self.mineable:
            self.handleMistake()
            return
        
        # Flag this tile
        self.state = STATES["FLAGGED"]
        self.changeable = False
        self.mark.set_text("X")
        self.set_color(COLORS["FLAGGED"])
        self.board.handleCrossouts(self.j, self.i)
        self.board.updateBoard()
        return
    
    
    
class Number():
    def __init__(self, board: "Game", i: int, j: int, value: int):
        self.value = value
        self.board = board
        self.i, self.j = i, j
        x, y = self.board.cell_to_coords(self.i, self.j)
        self.text = games.Text(self.board, x + BOX_SIZE / 2, y + BOX_SIZE / 2, str(value), BOX_SIZE, COLORS["NUMS"])
        
    def crossout(self) -> None:
        self.text.set_color(COLORS["CROSSOUT"])
        
        
    
    

class Game(boards.SingleBoard):
    
    def __init__(self):
        self.mineableTiles: int = 0
        self.health: int = MAX_MISTAKES
        self.lines: list[games.Line] = []
        self.init_singleboard((MARGIN_X, MARGIN_Y), WIDTH, HEIGHT, BOX_SIZE)
        self.draw_all_outlines()
        self.grid: list[list[Tile]]
        self.rowNums: list[list[Number]] = []
        self.colNums: list[list[Number]] = []
        self.handleAllNums()
        self.previous_mouse_positions: set[tuple[int, int]] = set[tuple[int, int]]()
        self.progress: int = 0
        x1, y1 = self.cell_to_coords(WIDTH - 1, HEIGHT + 1)
        x2, y2 = self.cell_to_coords(0, HEIGHT + 1)
        x = (x1 + x2) / 2
        y = (y1 + y2) / 2
        self.game_over_text = games.Text(self, x + BOX_SIZE / 2, y + BOX_SIZE / 2, "", BOX_SIZE, COLORS["WIN"])
        self.createLargeOutlines()
        
    def new_gamecell(self, i: int, j: int) -> Tile:
        mineable: bool = random.random() <= FILL_PERCENT
        if mineable:
            self.mineableTiles += 1
        return Tile(self, i, j, mineable)
    
    def tick(self):
        buttons = self.mouse_buttons()
        button: int = 0
        if not buttons[0] and not buttons[2]:
            self.previous_mouse_positions.clear()
            return
        if buttons[0] and buttons[2]:
            return
        if buttons[2]:
            button = 2
        x, y = self.mouse_position()
        i, j = self.coords_to_cell(x, y)
        assert isinstance(i, int) and isinstance(j, int)
        if not self.on_board(i, j):
            return
        if (i, j) in self.previous_mouse_positions:
            return
        self.previous_mouse_positions.add((i, j))
        # Left Click
        if button == 0:
            self.grid[i][j].mine()
            return
        
        # Right Click
        if button == 2:
            self.grid[i][j].flag()
            return
        return
    
    def createLargeOutlines(self) -> None:
        for i in range(5, WIDTH, 5):
            x1, y1 = self.cell_to_coords(i, 0)
            x2, y2 = self.cell_to_coords(i, HEIGHT)
            self.lines.append(games.Line(self, 0, 0, [(x1, y1), (x2, y2)], COLORS["GRID"], 0, LARGE_OUTLINE_THICKNESS))
        for j in range(5, HEIGHT, 5):
            x1, y1 = self.cell_to_coords(0, j)
            x2, y2 = self.cell_to_coords(WIDTH, j)
            self.lines.append(games.Line(self, 0, 0, [(x1, y1), (x2, y2)], COLORS["GRID"], 0, LARGE_OUTLINE_THICKNESS))
    
    
    def handleAllNums(self) -> None:
        for j in range(HEIGHT):
            self.rowNums.append([])
            rowNums = self.getRowNums(j)
            n = len(rowNums)
            for i in range(n):
                self.rowNums[-1].append(Number(self, i - n, j, rowNums[i]))
                
        for i in range(WIDTH):
            self.colNums.append([])
            colNums = self.getColNums(i)
            m = len(colNums)
            for j in range(m):
                self.colNums[-1].append(Number(self, i, j - m, colNums[j]))
                
        for j in range(HEIGHT):
            if self.rowNums[j][0].value == 0:
                self.grid[0][j].flag()
        for i in range(WIDTH):
            if self.colNums[i][0].value == 0:
                self.grid[i][0].flag()        
        
                
                
    def updateBoard(self):
        if self.health == 0:
            self.game_over_text.set_color(COLORS["LOSE"])
            self.game_over_text.set_text("YOU LOST!")
            for i in range(WIDTH):
                for j in range(HEIGHT):
                    self.grid[i][j].changeable = False
        elif self.progress == self.mineableTiles:
            self.game_over_text.set_text("YOU WIN!")
    
    
    def getRowNums(self, rowIndex: int) -> list[int]:
        outnums: list[int] = []
        total: int = 0
        for i in range(WIDTH):
            if self.grid[i][rowIndex].mineable:
                total += 1
            elif total > 0:
                outnums.append(total)
                total = 0
        if total > 0 or len(outnums) == 0:
            outnums.append(total)
        return outnums
    
    
    def getColNums(self, colIndex: int) -> list[int]:
        outnums: list[int] = []
        total: int = 0
        for j in range(HEIGHT):
            if self.grid[colIndex][j].mineable:
                total += 1
            elif total > 0:
                outnums.append(total)
                total = 0
        if total > 0 or len(outnums) == 0:
            outnums.append(total)
        return outnums
    
    
    def handleCrossouts(self, rowIndex: int, colIndex: int) -> None:
        k: int = 0
        total: int = 0
        for i in range(0, WIDTH, 1):
            if self.grid[i][rowIndex].state == STATES["UNKNOWN"]:
                break
            if self.grid[i][rowIndex].state == STATES["MINED"]:
                total += 1
                if total == self.rowNums[rowIndex][k].value:
                    if i + 1 < WIDTH:
                        self.grid[i + 1][rowIndex].flag()
                    self.rowNums[rowIndex][k].crossout()
                    k += 1
            if self.grid[i][rowIndex].state == STATES["FLAGGED"]:
                total = 0
                
        k: int = -1
        total: int = 0
        for i in range(WIDTH - 1, -1, -1):
            if self.grid[i][rowIndex].state == STATES["UNKNOWN"]:
                break
            if self.grid[i][rowIndex].state == STATES["MINED"]:
                total += 1
                if total == self.rowNums[rowIndex][k].value:
                    if i - 1 > -1:
                        self.grid[i - 1][rowIndex].flag()
                    self.rowNums[rowIndex][k].crossout()
                    k -= 1
            if self.grid[i][rowIndex].state == STATES["FLAGGED"]:
                total = 0
                
        k: int = 0
        total: int = 0
        for j in range(0, HEIGHT, 1):
            if self.grid[colIndex][j].state == STATES["UNKNOWN"]:
                break
            if self.grid[colIndex][j].state == STATES["MINED"]:
                total += 1
                if total == self.colNums[colIndex][k].value:
                    if j + 1 < HEIGHT:
                        self.grid[colIndex][j + 1].flag()
                    self.colNums[colIndex][k].crossout()
                    k += 1
            if self.grid[colIndex][j].state == STATES["FLAGGED"]:
                total = 0
                
        k: int = -1
        total: int = 0
        for j in range(HEIGHT - 1, -1, -1):
            if self.grid[colIndex][j].state == STATES["UNKNOWN"]:
                break
            if self.grid[colIndex][j].state == STATES["MINED"]:
                total += 1
                if total == self.colNums[colIndex][k].value:
                    if j - 1 < HEIGHT:
                        self.grid[colIndex][j - 1].flag()
                    self.colNums[colIndex][k].crossout()
                    k -= 1
            if self.grid[colIndex][j].state == STATES["FLAGGED"]:
                total = 0
                
        crossout_row: bool = True
        crossout_col: bool = True
        for i in range(WIDTH):
            if self.grid[i][rowIndex].mineable and not self.grid[i][rowIndex].state == STATES["MINED"]:
                crossout_row = False
        for j in range(HEIGHT):
            if self.grid[colIndex][j].mineable and not self.grid[colIndex][j].state == STATES["MINED"]:
                crossout_col = False
        if crossout_row:
            for i in range(WIDTH):
                self.grid[i][rowIndex].flag()
        if crossout_col:
            for j in range(HEIGHT):
                self.grid[colIndex][j].flag()
        
                
        
            
                
            
            
            
        
        



game = Game()
game.mainloop()